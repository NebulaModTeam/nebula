name: Publish Release

on:
  workflow_dispatch:
    branches: [master]

jobs:
  build:
    runs-on: windows-latest

    env:
      SOLUTION_NAME: Nebula.sln
      NEBULA_FOLDER : dist\\release\\nebula\\
      DIST_RELEASE_FOLDER : dist\\release\\

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0 # can't shallowly clone due to git versioning
      - run: |
          git config user.name '${{ github.actor }}'
          git config user.email '${{ github.actor }}@users.noreply.github.com'
          git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
        
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Clear output directory in DSP files
        # We use SilentlyContinue here because it errors out if the folder does not exist otherwise
        run :  rm -R -ErrorAction SilentlyContinue "dist"
    
      - name: Add remote build identifier
        run: New-Item -Name .remoteBuild -ItemType File -force

      # Add dotnet to the PATH: https://github.com/actions/setup-dotnet
      - name: Setup dotnet.exe
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "5.0.x"
      - run: |
             dotnet tool install --tool-path . nbgv

      # Build it
      - name: Build the application
        run: dotnet build $env:SOLUTION_NAME /p:Configuration=Release /p:PublicRelease=true

      # Bundle
      - name: Bundle build for thunderstore and github
        env:
          TCLI_AUTH_TOKEN: ${{ secrets.TS_SERVICE_ACCOUNT_TOKEN }}
        run: node .github\scripts\thunderstore_bundle.js

      - name: Prepare Release
        id: prepare-release
        run: |
          $version = ./nbgv prepare-release --format json;
          echo "::set-output name=PREPARE_RELEASE_OUTPUT::$version";
      
      - name: Push changes
        run: |
          git push;
          git checkout ${{ fromJson(steps.prepare-release.outputs.PREPARE_RELEASE_OUTPUT).NewBranch.Name }};
          git push -u origin head;
          git checkout ${{ fromJson(steps.prepare-release.outputs.PREPARE_RELEASE_OUTPUT).CurrentBranch.Name }}

      # Upload the thunderstore artifact (in case automatic upload fails)
      - uses: actions/upload-artifact@v2.2.4
        with:
          name: nebula-thunderstore
          path: ${{ env.DIST_RELEASE_FOLDER }}nebula-NebulaMultiplayerMod

      # Upload the API thunderstore artifact (in case automatic upload fails)
      - uses: actions/upload-artifact@v2.2.4
        with:
          name: nebula-api-thunderstore
          path: ${{ env.DIST_RELEASE_FOLDER }}nebula-NebulaMultiplayerModApi
        continue-on-error: true

      # Create release
      - uses: hubastard/release-action@v1
        with:
          artifactErrorsFailBuild: true
          bodyFile: "${{ env.DIST_RELEASE_FOLDER }}BODY.md"
          artifacts: "${{ env.DIST_RELEASE_FOLDER }}Nebula_${{ fromJson(steps.prepare-release.outputs.PREPARE_RELEASE_OUTPUT).NewBranch.Version }}.zip"
          tag: ${{ fromJson(steps.prepare-release.outputs.PREPARE_RELEASE_OUTPUT).NewBranch.Name }}
          commit: ${{ fromJson(steps.prepare-release.outputs.PREPARE_RELEASE_OUTPUT).NewBranch.Name }}
          token: ${{ secrets.GITHUB_TOKEN }}

       # Publish to NuGet
      - name: Publish to NuGet
        run: |
          dotnet pack .\NebulaAPI\NebulaAPI.csproj -c Release -o "." -p:OutDir="bin/net472/Release/" -p:PublicRelease=true
          dotnet nuget push *.nupkg -s https://api.nuget.org/v3/index.json -k ${{secrets.NUGET_API_KEY}} --skip-duplicate